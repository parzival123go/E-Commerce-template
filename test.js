const puppeteer=require("puppeteer"),{expect:expect,assert:assert}=require("chai"),config=require("./config.json");let browser,page,requests=[];function pause(e){return new Promise(t=>{setTimeout(()=>{t("resolved")},e)})}function getHTML(e){return page.evaluate(e=>{try{return document.querySelector(e).outerHTML}catch(e){return null}},e)}function getInnerText(e){return page.evaluate(e=>document.querySelector(e).innerText,e)}function checkElements(e){for(let[t,a]of Object.entries(e))it(`Should have ${t}`,async()=>{expect(await page.$(a)).to.be.ok})}function runCases(e){e.forEach(async e=>{let{text:t,selector:a,property:i,value:o}=e;return it(t,async()=>{let e=await getStyles(a);expect(e[i]).to.equal(o)})})}before(async function(){this.timeout(config.timeout),browser=await puppeteer.launch(config),[page]=await browser.pages(),await page.setRequestInterception(!0),page.on("request",e=>{requests.push(e.url()),e.continue()}),await page.emulateMediaType("screen"),await page.setViewport(config.defaultViewport),await page.goto(config.url,{waitUntil:"load",timeout:0})}),after(async()=>{await browser.close()}),context("INFO 2602 A2",()=>{describe("Test Suite 1: Should be able to login",()=>{it("Page redirects to /app when login is attempted with credentials bob bobpass, forms fields should have ids username and password respectively",async()=>{await page.type("#username","bob"),await page.type("#password","bobpass"),await page.click('input[type="submit"]');const e=await page.url();expect(e).to.equal(`${config.url}/app`)})}),describe("Test Suite 2: The Home page",()=>{it("should display the correct page title",async()=>{const e=await page.title();return expect(e).to.equal("Home")}),it('should display a bulbasaur link with the class "active"',async()=>{const e=await page.$("a.collection-item.active"),t=await page.evaluate(e=>e.textContent,e);return expect(t).to.equal("Bulbasaur")}),it("Should load a list of 801 pokemon links with the class 'collection-item'.",async()=>{let e=await page.$$("a.collection-item");return expect(e.length).to.equal(801)}),it("Should display the correct weight, height, types, and image when a pokemon is selected",async()=>{await page.click("#poke-54");const e=await page.$eval(".card span.card-title",e=>e.innerText);expect(e).to.include("Psyduck");const t=await page.$eval(".card p:nth-of-type(1)",e=>e.innerText);expect(t).to.include("Type1: water");const a=await page.$eval(".card p:nth-of-type(2)",e=>e.innerText);expect(a).to.include("Type2: None");const i=await page.$eval(".card p:nth-of-type(3)",e=>e.innerText);expect(i).to.include("Weight: 19.6");const o=await page.$eval(".card p:nth-of-type(4)",e=>e.innerText);expect(o).to.include("Height: 0.8");const n=await page.$eval(".card img",e=>e.getAttribute("src"));expect(n).to.include("https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/54.png")})}),describe("Test Suite 3: Capturing Pokemon",()=>{it("Should show newly captured pokemon in table after capturing",async()=>{await page.type("#pokemon_name","Ron"),await page.click("#captureBtn");const e=await page.$$("tr");let t=!1;for(let a of e){const e=await a.$$("td");for(let a of e){const e=await a.evaluate(e=>e.innerText);"bulbasaur"!==e.toLowerCase().trim()&&"ron"!==e.toLowerCase().trim()||(t=!0)}}expect(t).to.be.true})}),describe("Test Suite 4: Renaming a Pokemon",()=>{it("should successfully rename a Pokemon",async()=>{await page.type("#Ron-new_name","Rick"),await page.click("#rename-Ron");const e=await page.$eval("tr:last-child td:nth-child(2)",e=>e.innerText);return console.log(e),expect(e).to.equal("Rick")})}),describe("Test Suite 5: Releasing a pokemon",()=>{it("should remove a row when the release button is clicked",async()=>{const e=await page.$$eval("tbody tr",e=>e.length);await page.click("#release-Rick"),await page.waitForFunction((e,t)=>{return document.querySelectorAll(e).length===t-1},{},"tbody tr:first-child",e);const t=await page.$$eval("tbody tr",e=>e.length);expect(t).to.equal(e-1)})})});